<template>
  <d2-container type="card" >
    <template slot="header">集群</template>
        <div class="handle-head">
          <div class="filter">
            <el-select v-model="table.getParams.datacenter__name" filterable class="d2-mr-5" size="mini"  placeholder="请选择数据中心"  @change="getClusterData">
              <el-option
                v-for="item in TreeData"
                :key="item.value"
                :label="item.label"
                :value="item.value"
              >
              </el-option>
            </el-select>
          </div>
          <div class="search" >
            <el-input v-model="table.getParams.search" placeholder="请输入集群名"  class="handle-input mr5" size="mini"  ></el-input>
            <el-button icon="el-icon-search"  size="mini" circle @click="getClusterData" style="margin-left: 10px"></el-button>
            <el-button size="mini"  icon="el-icon-refresh" circle @click="refreshClick"></el-button>
          </div>
          <div class="download">
            <el-button type="primary" size="mini" round @click="exportExcel">
              <d2-icon name="download"/>导出Excel
            </el-button>
            <el-popover placement="top-end" width="50" trigger="click" style="margin-left: 5px">
            <el-checkbox-group v-model="colOptions">
              <el-checkbox v-for="item in colSelect" :label="item" :key="item"></el-checkbox>
            </el-checkbox-group>
              <el-button slot="reference" type="info" size="mini"  circle icon="el-icon-setting"></el-button>
            </el-popover>
          </div>
        </div>
        <el-table
          ref="clusterTable"
          :data="table.data"
          style="width: 100%"
          height="250"
          @sort-change="changeTableSort"
          v-show="table.data.length>0"
        >
          <el-table-column prop="name" label="集群名" width="120" v-if="table.columns[0].istrue" ></el-table-column>
          <el-table-column prop="datacenter" label="数据中心" width="150" v-if="table.columns[1].istrue"></el-table-column>
          <el-table-column prop="cputotal" label="CPU总计" width="130" v-if="table.columns[2].istrue"></el-table-column>
          <el-table-column prop="cpuusage" label="CPU已用" width="130" v-if="table.columns[3].istrue"></el-table-column>
          <el-table-column prop="memtotal" label="内存总计" width="130" v-if="table.columns[4].istrue"></el-table-column>
          <el-table-column prop="memusage" label="内存已用" width="130" v-if="table.columns[5].istrue"></el-table-column>
          <el-table-column prop="datatotal" label="存储总计" width="130" v-if="table.columns[6].istrue"></el-table-column>
          <el-table-column prop="datafree" label="存储余量" width="130"  v-if="table.columns[7].istrue" sortable="custom"></el-table-column>
          <el-table-column prop="numshosts" label="宿主机数" width="130" sortable="custom" v-if="table.columns[8].istrue"></el-table-column>
          <el-table-column prop="vmscount" label="虚拟机数" width="130"  v-if="table.columns[9].istrue"></el-table-column>
          <el-table-column prop="overallstatus" label="状态" width="110"  v-if="table.columns[10].istrue">
            <template slot-scope="scope">
              <div slot="referehce" class="name-wapper" style="text-align: center">
                <el-tag style="color: #000" :color="CLUSTER_STATUS[scope.row.overallstatus].color">
                  {{CLUSTER_STATUS[scope.row.overallstatus].type}}
                </el-tag>
              </div>
            </template>
          </el-table-column>
        </el-table>
        <div class="d2-crud-footer">
          <div class="d2-crud-pagination">
            <el-pagination
              @size-change="handleSizeChange"
              @current-change="handleCurrentChange"
              :current-page.sync="table.getParams.page"
              :page-sizes="[10, 20, 50,100,500]"
              :page-size="table.getParams.page_size"
              layout="total, sizes, prev, pager, next, jumper"
              :total="table.total">
            </el-pagination>
          </div>
        </div>
  </d2-container>

</template>

<script>
import { getcluster,gettreedata} from '@api/vms'
import Vue from 'vue'
import pluginExport from '@d2-projects/vue-table-export'

Vue.use(pluginExport)
export default {
  name: 'cluster',
  created () {
    this.getClusterData();
    this.getTreeData();
    for (let i=0;i< this.table.columns.length; i++){
      this.colSelect.push(this.table.columns[i].label);
      this.colOptions.push(this.table.columns[i].label);
    }

  },
  watch: {
    colOptions(valArr){
      var that = this;
      var arr = that.colSelect.filter(i=>valArr.indexOf(i)<0);
      that.table.columns.map(i=>{
        if (arr.indexOf(i.label) !== -1){
          i.istrue=false;
        }else {
          i.istrue = true;
        }
      });
      this.$nextTick(() => {
        //console.log(this.layout)
        this.$refs.clusterTable.doLayout();
        //console.log(this.$refs.clusterTable)
        //console.log(this.$refs.cluster)
        //this.$refs.clusterTable.height = 500;

      });


    }
  },
  data () {
    return {
      TreeData:[],
      colOptions: [],
      colSelect: [],
      table: {
        columns: [
          //{label: 'ID',prop: 'id',sort:"custom"},
          { label: '集群名', prop: 'name',istrue: true },
          { label: '数据中心', prop: 'datacenter', istrue: true},
          { label: 'CPU总计', prop: 'cputotal',istrue: true },
          { label: 'CPU用量', prop: 'cpuusage',istrue: true },
          { label: '内存总计', prop: 'memtotal',istrue: true },
          { label: '内存用量', prop: 'memusage',istrue: true },
          { label: '存储总计', prop: 'datatotal', istrue: true},
          { label: '存储余量', prop: 'datafree', istrue: true},
          { label: '宿主机数', prop: 'numshosts', istrue: true},
          { label: '虚拟机数', prop: 'vmscount',istrue: true },
          { label: '状态', prop: 'overallstatus', istrue: true}

        ],
        data: [],
        size: 'mini',
        stripe: 'true',
        fit: 'true',
        getParams:{
          page:1,
          page_size:10,
          search:'',
          ordering:'',
          datacenter__name: ''
        },
        total:0,

      },
      CLUSTER_STATUS: {
        'green' :{'color':'#67C23A','type':'正常'},
        'yellow' :{'color':'#E6A23C','type':'异常'}
      }
    }
  },
  methods: {
    //导出excel
    exportExcel () {
      this.$export.excel({
        title : '集群列表',
        columns: this.table.columns,
        data: this.table.data,
      }).then(() => {
        this.$message('表格导出成功')
      })
    },
    //获取集群信息
    getClusterData () {
      getcluster(this.table.getParams).then(res => {
        console.log(this.table.getParams)
        this.table.data = res.results;
        this.table.total = res.count;
        console.log(this.table.data)
      }).catch(function (error) {
        console.log(error)
      })
    },
    getTreeData() {
      gettreedata().then(res=>{
        console.log(res)
        this.TreeData = res
      })
    },
    refreshClick(){
      this.table.getParams = {
        page:1,
        page_size:10,
        search:'',
        ordering:'',
        datacenter__name: ''

      };
      this.getClusterData()
    },
    handleCurrentChange(page){
      this.table.getParams.page=page
      this.getClusterData()
    },
    handleSizeChange(size){
      this.table.getParams.page_size = size
      this.getClusterData()
    },
    //对指定字段排序
    changeTableSort (column) {
      console.log(column);
      //  获取字段名和排序类型
      var fieldName = column.prop;
      var sortingType = column.order;
      //按照降序排序
      if (sortingType === "descending") {
        this.table.getParams.ordering = '-' + fieldName
        this.getClusterData()
        // this.table.data = this.table.data.sort((a, b) => b[fieldName] - a[fieldName]);
      }
      //按照升序排序
      else {
        this.table.getParams.ordering = fieldName
        this.getClusterData()
        //this.table.data = this.table.data.sort((a, b) => a[fieldName] - b[fieldName]);

      }
    },


  }
}
</script>

<style scoped>
.el-row {
  margin-bottom: 20px;
  &:last-child {
   margin-bottom: 0;
  }
}
.el-col {
  border-radius: 4px;
}
.handle-head {
  padding-bottom: 5px;
}
.search {
  float: left;
}
.filter {
  float: left;
  margin-right: 10px;
}
.handle-input {
  width: 300px;
  display: inline-block;
}
.download {
  margin-top: 5px;
  margin-bottom: 5px;
  margin-inside: 5px;
  float: right;
}

</style>
